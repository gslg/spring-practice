<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.lg.springsource"/>
    <bean class="com.lg.springsource.beans.MyTestBean"/>
    <bean id="car" class="com.lg.springsource.factory.CarFactoryBean">
        <property name="carInfo">
            <value type="java.lang.String">超级包车,400,2000</value>
        </property>
    </bean>

    <bean  id="testA" class="com.lg.springsource.beans.CircleA">
        <!--通过构造函数循环引用无解-->
        <!--<constructor-arg index="0" ref="testB"/>-->
        <!--通过setter注入循环依赖,仅适用于单例-->
        <property name="testB" ref="testB"/>
    </bean>

    <bean id="testB" class="com.lg.springsource.beans.CircleB">
        <!--<constructor-arg index="0" ref="testC"/>-->
        <property name="testC" ref="testC"/>
    </bean>

    <bean id="testC" class="com.lg.springsource.beans.CircleC" >
        <!--<constructor-arg index="0" ref="testA"/>-->
        <property name="testA" ref="testA"/>
    </bean>
    <!--scope作用域的循环依赖不能注入-->
    <!--<bean id="testA" class="com.lg.springsource.beans.CircleA" scope="prototype">
        <property name="testB" ref="testB"/>
    </bean>
    <bean id="testB" class="com.lg.springsource.beans.CircleB" scope="prototype">
        <property name="testC" ref="testC"/>
    </bean>

    <bean id="testC" class="com.lg.springsource.beans.CircleC" scope="prototype">
        <property name="testA" ref="testA"/>
    </bean>-->
   <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
      &lt;!&ndash;  <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="url" value="${jdbc.url}"/>&ndash;&gt;
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value=""/>
    </bean>-->

    <!--datasource-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value=""/>
    </bean>
    <!--事务管理-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <!-- ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface -->
    <aop:config>
        <aop:pointcut id="userServiceOperation" expression="execution(* com.lg.springsource.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="userServiceOperation"/>
    </aop:config>

</beans>